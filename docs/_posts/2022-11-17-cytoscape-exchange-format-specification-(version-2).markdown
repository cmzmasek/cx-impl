---
layout: post
title:  "Cytoscape Exchange Format Specification (Version 2)"
date:   2022-12-01 
categories: CX2 Specification
---


## Motivation


The goals of this major revision of CX are
 
1. Making the CX data model simpler so that it can be easily understood and used by developers.
2. Better support for processing networks while streaming. The 2.0 spec will significantly reduce the memory footprint for operations such as filtering nodes and edges based on node/edge properties and converting the CX network to other formats. 
3. Making CX networks more compact to improve data transfer speed.

## Table of contents

1. [Top Level Structure of CX](#top-level-structure-of-cx)
2. [CX Descriptor](#cx-descriptor)
3. [Pre and Post Metadata in CX](#pre-and-post-metadata-in-cx)
4. [Aspect Data Blocks](#aspect-data-blocks)
5. [Status Aspect](#status-aspect)
6. [CX Core Aspects](#cx-core-aspects)


## Top Level Structure of CX

At the top level, a CX network is represented as a JSON array of objects which has this structure 

```
[
  <CX descriptor>,
  <Optional pre-metadata>,
  <aspect data block 1>,
  <aspect data block 2>,
  ...
  <aspect data block N>,
  <Optional post-metadata>,
  <status Aspect>
]

```

## CX Descriptor

A CX document always starts with this object. It defines some global attributes in this object. It has these attributes in it

{% highlight json %}
  { 
    "CXVersion": 	string
    "hasFragments":	boolean
  }
{% endhighlight %}

- **"CXVersion"** - the version number of the CX schema used in this document. Its format is "major.minor". Required
- **"hasFragments"** - indicate if the data in any aspect are broken into multiple fragments in this CX document. The default value of this attribute is false, which means each aspect only appears once in the CX document.
    - Allowing fragmented aspects can be useful in applications that need to incrementally write out mixed types of elements when generating a CX network. One common use case is that an application needs to stream out a subnetwork from a large network when traversing the large network.
    - Non-fragmented CX networks are more compact and will allow users to write more efficient applications. For example, if an application only needs a certain aspect when reading a non-fragmented CX network from an input stream, the application can stop the reading when it sees the end of that aspect. 


## Pre and Post Metadata in CX


CX aspect metadata declaration is optional. It can be used for data integrity checks when users want to use a CX document. Aspect metadata can be declared in either pre or post metadata sections. A network creator should always put metadata in the pre-metadata section if it is possible. 

A metadata object has these attributes in it: 

{% highlight json %}
  {
    "name":         string,
    "elementCount": long 
  }
{% endhighlight %}


- **"name"**  -  the name of the aspect and is the only required attribute.
- **"elementCount"** - the number of elements in this aspect. It is optional.


## Aspect Data Blocks
Aspect data blocks contain network data that are organized in aspects. When the aspect data blocks are completely missing, this CX document represents an empty network. 

Each data block is a JSON object that has a single attribute in it. The name of the attribute is the aspect name. Its value is a list of aspect elements. All elements in an aspect should have the same data structure. The format of an aspect data block is like this:


```
{ ASPECT_NAME: [ aspect_elements ] }
```

# Status Aspect
A complete CX stream ends with a status aspect. This aspect tells the recipient if the CX is successfully generated by the source. A use case is that a source is generating a CX network incrementally and transmits the data to the recipient through a stream, when an error occurs during the creation of the CX network, the source can write out a status aspect to the CX stream with some error message in it and finish the CX network immediately. The recipient will know from this aspect that the CX is a bad object and can stop the downstream process on this network. The status aspect has this structure:

{% highlight json %}
{
  "status" : [ {
    "error" : string,
    "success" : boolean
   } ]
}
{% endhighlight %}

The `"error"` field holds the error message when an error occurs. `"success"` fields tell if the CX document is successfully generated by the source.



## CX Core Aspects

Core aspects are the set of aspects that are supported by all Cytoscape Ecosystem compatible applications. These are the names and definition of core aspects in CX 

# attributeDeclarations

This aspect is for declaring the data type, default value, or alias of attributes. 

For a given attribute in an aspect, its type has to be declared before it appears in an aspect element. All values of an attribute must have the same data type in an aspect. 

This aspect can be fragmented, but when an attribute type is declared, it has to be declared before it is used in that aspect. 

The schema of this aspect is:

```
{
  Aspect_Name1: { attribute1: {"d": string ,"v": value, "a": string},
                  attribute2: {"d": string, "v": value},
                  …
                  attributeN: {"d": string, "v": value}    } ,
  Aspect_Name2: { attribute1: {"d": string, "v": value}, … },
   … 
}
```
- **Aspect_Name** - The name of the aspect that this attribute is in. It can be networkAttributes, nodes, edges, edgeAttributes, or nodeAttributes. edgeAttributes and nodeAttributes aspects are only for Cytoscape collections. 
- **attributeN** - the name of the attribute in that aspect. 
- **"d"** - declares the data type of that attribute. CX supports these data types in attributes:
  - string
  - long
  - integer
  - double
  - boolean
  - list_of_string
  - list_of_long
  - list_of_integer
  - list_of_double
  - list_of_boolean
- **"v"** - declare a default value of that attribute. If “v” is defined for an attribute in an aspect, when an element doesn’t have that attribute in it, an attribute with the default value will be created for that attribute. Using this declaration can reduce the size of a CX document when one attribute value is repeated many times in an aspect. Developers need to be careful when they use this field. This field can only be used when there is no null value on that attribute. For the same network, different developers or applications might choose a different value as the default value for a given attribute.       
- **"a"** - declare an alias for the attribute if you want to minimize the length of the attribute name. An alias should be unique in that aspect and should be different from any un-declared attribute in that aspect. If an alias is declared for an attribute, the full attribute name can no longer be used in that aspect.

# networkAttributes

For a single network, the networkAttributes aspect has only one element. This element is a JSON object with these reserved attribute names:  

- **name** - title of the network
- **description** - a brief description of the network 
- **version** - version of the network


